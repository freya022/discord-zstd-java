# Modified from https://github.com/DSharpPlus/DSharpPlus.Natives/blob/f4391784d99fb2cd0c5e37122b4aa65ec04420ba/.github/workflows/zstd.yml

name: Publish discord-zstd-java
on:
  workflow_dispatch:

env:
  COMMON_CMAKE_FLAGS: "-DZSTD_BUILD_PROGRAMS=OFF -DZSTD_LEGACY_SUPPORT=OFF -DZSTD_BUILD_STATIC=OFF -DBUILD_SHARED_LIBS=ON -DZSTD_BUILD_DICTBUILDER=OFF -DZSTD_BUILD_COMPRESSION=OFF -DCMAKE_BUILD_TYPE=Release"

concurrency:
  group: "publish"

jobs:
  build:
    name: Build Zstd
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false # Run the other two OSs even if one fails
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]

    steps:
      - name: Clone zstd repo
        uses: actions/checkout@v5
        with:
          repository: facebook/zstd
          ref: "f8745da6ff1ad1e7bab384bd1f9d742439278e99" # v1.5.7

      - name: Build Zstd
        shell: bash
        run: |
          cd build/cmake
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            for arch in x64 ARM64; do # We dont want Win32
              mkdir -p ../../output/$arch
              mkdir build-$arch
              cd build-$arch
              cmake $COMMON_CMAKE_FLAGS -A $arch ..
              cmake --build . -j 4 --config Release
              cp lib/Release/zstd.dll ../../../output/$arch/libzstd.dll
              cd ..
            done
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            for arch in x64 ARM ARM64; do
              mkdir -p ../../output/$arch
              mkdir build-$arch
              cd build-$arch
              if [[ "$arch" == "ARM64" ]]; then
                sudo apt update
                sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
                cmake $COMMON_CMAKE_FLAGS -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ ..
              elif [[ "$arch" == "ARM" ]]; then
                sudo apt update
                sudo apt install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
                cmake $COMMON_CMAKE_FLAGS -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ ..
              else
                cmake $COMMON_CMAKE_FLAGS ..
              fi
              cmake --build . -j 4
              cp lib/libzstd.so ../../../output/$arch/libzstd.so
              cd ..
            done
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            mkdir build ../../output
            cd build
            cmake $COMMON_CMAKE_FLAGS "-DCMAKE_OSX_ARCHITECTURES=arm64;arm64e;x86_64;x86_64h" ..
            cmake --build . -j 4 --config Release
            cp lib/libzstd.dylib ../../../output/libzstd.dylib
            cd ..
          fi

      - name: Publish Artifacts
        uses: actions/upload-artifact@v5
        with:
          name: zstd-${{ matrix.os }}
          path: output

  publish:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Clone repo
        uses: actions/checkout@v5

      - name: Set up JDK 25
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 25

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-disabled: true

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: temp
          pattern: zstd-*
          merge-multiple: true

      - name: Move Artifacts
        run: |
          mkdir -p natives/src/main/resources/natives/linux-x86-64
          mkdir -p natives/src/main/resources/natives/linux-aarch64
          mkdir -p natives/src/main/resources/natives/linux-arm
          mkdir -p natives/src/main/resources/natives/win32-x86-64
          mkdir -p natives/src/main/resources/natives/win32-aarch64
          mkdir -p natives/src/main/resources/natives/darwin
          cp temp/x64/libzstd.so natives/src/main/resources/natives/linux-x86-64/libzstd.so
          cp temp/ARM64/libzstd.so natives/src/main/resources/natives/linux-aarch64/libzstd.so
          cp temp/ARM/libzstd.so natives/src/main/resources/natives/linux-arm/libzstd.so
          cp temp/x64/libzstd.dll natives/src/main/resources/natives/win32-x86-64/libzstd.dll
          cp temp/ARM64/libzstd.dll natives/src/main/resources/natives/win32-aarch64/libzstd.dll
          cp temp/libzstd.dylib natives/src/main/resources/natives/darwin/libzstd.dylib

      - name: Publish to Maven Central
        env:
          TEST_DATA_ZSTD_KEY: ${{ secrets.TEST_DATA_ZSTD_KEY }}
          TEST_DATA_ZSTD_PARAMETERS: ${{ secrets.TEST_DATA_ZSTD_PARAMETERS }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.MAVENCENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_TOKEN: ${{ secrets.MAVENCENTRAL_TOKEN }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: ./gradlew build publish jreleaserDeploy
